" .local file for vimrc customizations, on top of thoughtbot dotfiles

" set 256 colours support
set t_Co=256

" Use preferred colour scheme
" Use :set background=light for light version of solarized
set background=dark
colorscheme solarized
" colorscheme nova

" Set mapleader
let mapleader = ","

" Use relative number
set relativenumber

" Edit or view files in same directory as current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" Opens an edit command with the path of the currently edited 
" file filled in Normal mode: <leader>e
map <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited 
" file filled in Normal mode: <leader>t
map <leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Let tim pope's ragtag plugin do its stuff 
" (ctrl+x =) to insert loud erb tags for example
inoremap <M-o>       <Esc>o
inoremap <C-j>       <Down>
let g:ragtag_global_maps = 1

" Use powerline
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

" " Exit insert mode more quickly while using powerline
" " Disabling this for now becuase it conflicts with ragtag plugin
" if ! has('gui_running')
"   set ttimeoutlen=10
"   augroup FastEscape
"     autocmd!
"     au InsertEnter * set timeoutlen=0
"     au InsertLeave * set timeoutlen=1000
"   augroup END
" endif

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Write/save files from Insert mode
" *** The Two Hand system ***
" <Cr> signifies the "return" key
inoremap ;a <Esc>
inoremap ;d <Esc>:update<Cr>
inoremap ;f <C-O>:update<Cr>
nnoremap ;f :update<CR>

" *** The Right Hand system ***
inoremap ;l <Esc>
inoremap ;k <Esc>:update<Cr>
inoremap ;j <C-O>:update<Cr>
nnoremap ;j :update<CR>
" Keep all search matches hightlighted
set hlsearch 
set ignorecase
set smartcase

" Map leader h to clear highlighted search matches
map <leader>h :nohlsearch <CR>

" Let tim pope's ragtag plugin do its stuff 
" (ctrl+x =) to insert loud erb tags for example
let g:ragtag_global_maps = 1
" set timeout timeoutlen=5000 ttimeoutlen=100

" Spree deface files are html
au BufRead,BufNewFile *.{deface} set ft=eruby

" es6 files are javascript
au BufNewFile,BufRead *.es6 set filetype=javascript

" Set vim to always remove trailing whitespace in ruby files 
" and javascript files.... and others
autocmd BufWritePre *.rb :%s/\s\+$//e
autocmd BufWritePre *.erb :%s/\s\+$//e
autocmd BufWritePre *.rake :%s/\s\+$//e
autocmd BufWritePre *.js :%s/\s\+$//e
autocmd BufWritePre *.ino :%s/\s\+$//e
autocmd BufWritePre *.coffee :%s/\s\+$//e
autocmd BufWritePre *.scss :%s/\s\+$//e
autocmd BufWritePre *.less :%s/\s\+$//e
autocmd BufWritePre *.txt :%s/\s\+$//e
autocmd BufWritePre *.deface :%s/\s\+$//e
autocmd BufWritePre *.hbs :%s/\s\+$//e
autocmd BufWritePre *.md :%s/\s\+$//e
autocmd BufWritePre *.markdown :%s/\s\+$//e

" Mappings for thoughtbot's vim-rspec plugin
" (similar or based on Gary Bernhardts scripts
" See https://github.com/thoughtbot/vim-rspec
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" Run the specs via zeus
let g:rspec_command = '!zeus rspec {spec}'

" NETRW (Nerd tree like file browser)

" Set an absolute width for netrw window
let g:netrw_winsize = -28

" Set file list style to 'tree' in Explore mode
let g:netrw_liststyle=3

" sort is affecting only: directories on the top, files below
let g:netrw_sort_sequence = '[\/]$,*'

" use the previous window to open file
let g:netrw_browse_split = 4
